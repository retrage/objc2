//! # Bindings to Apple's frameworks
//!
//! `icrate` is an autogenerated interface to Apple's Objective-C frameworks
//! like AppKit, Foundation, Metal, WebKit, and so on.
//!
//! The bindings currently contain very little documentation, you should view
//! [Apple's developer documentation][apple-doc-index] for detailed
//! information about each API. (There are [plans][#309] for importing that
//! documentation here).
//!
//! This crate uses [`objc2`] to declare the external interface to the
//! Objective-C classes and protocols. It is highly recommended that you read
//! the documentation there for details on how the Objective-C interop works.
//!
//! It also uses [`block2::Block`] in the public API, check out the [`block2`]
//! crate for how to call such methods using a closure.
//!
//! A common mistake is to specify a different [`objc2`] or [`block2`] version
//! in your `Cargo.toml` than the one your version of `icrate` uses. The
//! versions that `icrate` currently uses is exported as `icrate::objc2` and
//! `icrate::block2` for convenience.
//!
//! [apple-doc-index]: https://developer.apple.com/documentation/technologies
//! [#309]: https://github.com/madsmtm/objc2/issues/309
//!
//!
//! ## Supported versions
//!
//! - macOS: `10.12-14.4`
//! - iOS/iPadOS: `10.0-17.4` (WIP)
//! - tvOS: `10.0-17.4` (WIP)
//! - watchOS: `5.0-10.4` (WIP)
//! - visionOS: Not currently supported
//!
//! These bindings are currently generated from the SDKs in Xcode 15.3.
//! The Xcode version will be periodically updated.
//!
//!
//! ## Use of `Deref`
//!
//! `icrate` uses the [`Deref`] trait in a bit special way: All objects deref
//! to their superclasses. For example, `NSMutableArray` derefs to `NSArray`,
//! which in turn derefs to `NSObject`.
//!
//! Note that this is explicitly recommended against in [the
//! documentation][`Deref`] and [the Rust Design patterns
//! book][anti-pattern-deref] (see those links for details).
//!
//! Due to Objective-C objects only ever being accessible behind pointers in
//! the first place, the problems stated there are less severe, and having the
//! implementation just means that everything is much nicer when you actually
//! want to use the objects!
//!
//! All objects also implement [`AsRef`] and [`AsMut`] to their superclass,
//! and can be used in [`Id::into_super`], so if you favour explicit
//! conversion, that is a possibility too.
//!
//! [`Deref`]: std::ops::Deref
//! [`ClassType`]: crate::objc2::ClassType
//! [anti-pattern-deref]: https://rust-unofficial.github.io/patterns/anti_patterns/deref.html
//! [`Id::into_super`]: objc2::rc::Id::into_super
//!
//!
//! ## Rust vs. Objective-C types
//!
//! A quick overview of some types you will encounter often in Objective-C,
//! and their approximate Rust equivalent.
//!
//! | Objective-C | (approximately) equivalent Rust |
//! | --- | --- |
//! | `NSData*` | `Arc<[u8]>` |
//! | `NSMutableData*` | `Vec<u8>` |
//! | `NSString*` | `Arc<str>` |
//! | `NSMutableString*` | `String` |
//! | `NSValue*` | `Arc<dyn Any>` |
//! | `NSNumber*` | `Arc<enum { I8(i8), U8(u8), I16(i16), U16(u16), I32(i32), U32(u32), I64(i64), U64(u64), F32(f32), F64(f64), CLong(ffi::c_long), CULong(ffi::c_ulong) }>` |
//! | `NSError*` | `Arc<dyn Error + Send + Sync>` |
//! | `NSException*` | `Arc<dyn Error + Send + Sync>` |
//! | `NSRange` | `ops::Range<usize>` |
//! | `NSComparisonResult` | `cmp::Ordering` |
//! | `NSArray<T>*` | `Arc<[T]>` |
//! | `NSMutableArray<T>*` | `Vec<T>` |
//! | `NSDictionary<K, V>*` | `Arc<HashMap<K, V>>` |
//! | `NSMutableDictionary<K, V>*` | `HashMap<K, V>` |
//! | `NSEnumerator<T>*` | `Box<dyn Iterator<T>>` |
//! | `NSCopying*` | `Box<dyn Clone>` |
//!
//!
//! ## Example
//!
//! ```console
//! $ cargo add icrate --features=Foundation,Foundation_all
//! ```
//!
#![cfg_attr(
    all(
        feature = "Foundation",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    ),
    doc = "```"
)]
#![cfg_attr(
    not(all(
        feature = "Foundation",
        feature = "Foundation_NSArray",
        feature = "Foundation_NSString"
    )),
    doc = "```ignore"
)]
//! use icrate::Foundation::{ns_string, NSCopying, NSArray};
//!
//! let string = ns_string!("world");
//! println!("hello {string}");
//!
//! let array = NSArray::from_id_slice(&[string.copy()]);
//! println!("{array:?}");
//! ```
#![no_std]
#![cfg_attr(feature = "unstable-docsrs", feature(doc_auto_cfg))]
// Update in Cargo.toml as well.
#![doc(html_root_url = "https://docs.rs/icrate/0.1.0")]
#![recursion_limit = "512"]

#[cfg(feature = "alloc")]
extern crate alloc;

#[cfg(feature = "std")]
extern crate std;

#[cfg(doctest)]
#[doc = include_str!("../README.md")]
extern "C" {}

#[cfg(feature = "objc2")]
pub extern crate objc2;

#[cfg(feature = "block2")]
pub extern crate block2;

mod additions;
mod common;
#[allow(unreachable_pub)]
mod generated;

/// Deprecated alias of [`Foundation::ns_string`].
#[macro_export]
#[deprecated = "use icrate::Foundation::ns_string instead"]
#[cfg(feature = "Foundation_NSString")]
macro_rules! ns_string {
    ($s:expr) => {
        $crate::Foundation::ns_string!($s)
    };
}

#[cfg(feature = "AppKit")]
pub use self::additions::AppKit;
#[cfg(feature = "AuthenticationServices")]
pub use self::additions::AuthenticationServices;
#[cfg(feature = "CallKit")]
pub use self::additions::CallKit;
#[cfg(feature = "Foundation")]
pub use self::additions::Foundation;
#[cfg(feature = "GameController")]
pub use self::additions::GameController;
#[cfg(feature = "InputMethodKit")]
pub use self::additions::InputMethodKit;
#[cfg(feature = "MapKit")]
pub use self::additions::MapKit;
#[cfg(feature = "Metal")]
pub use self::additions::Metal;
#[cfg(feature = "MetricKit")]
pub use self::additions::MetricKit;
#[cfg(feature = "Photos")]
pub use self::additions::Photos;
#[cfg(feature = "QuartzCore")]
pub use self::additions::QuartzCore;
#[cfg(feature = "WebKit")]
pub use self::additions::WebKit;

#[cfg(feature = "Accessibility")]
pub use self::generated::Accessibility;
#[cfg(feature = "AdServices")]
pub use self::generated::AdServices;
#[cfg(feature = "AdSupport")]
pub use self::generated::AdSupport;
#[cfg(feature = "AutomaticAssessmentConfiguration")]
pub use self::generated::AutomaticAssessmentConfiguration;
#[cfg(feature = "Automator")]
pub use self::generated::Automator;
#[cfg(feature = "BackgroundAssets")]
pub use self::generated::BackgroundAssets;
#[cfg(feature = "BackgroundTasks")]
pub use self::generated::BackgroundTasks;
#[cfg(feature = "BusinessChat")]
pub use self::generated::BusinessChat;
#[cfg(feature = "ClassKit")]
pub use self::generated::ClassKit;
#[cfg(feature = "CloudKit")]
pub use self::generated::CloudKit;
#[cfg(feature = "Contacts")]
pub use self::generated::Contacts;
#[cfg(feature = "CoreData")]
pub use self::generated::CoreData;
#[cfg(feature = "CoreLocation")]
pub use self::generated::CoreLocation;
#[cfg(feature = "CoreWLAN")]
pub use self::generated::CoreWLAN;
#[cfg(feature = "DataDetection")]
pub use self::generated::DataDetection;
#[cfg(feature = "DeviceCheck")]
pub use self::generated::DeviceCheck;
#[cfg(feature = "EventKit")]
pub use self::generated::EventKit;
#[cfg(feature = "ExceptionHandling")]
pub use self::generated::ExceptionHandling;
#[cfg(feature = "ExtensionKit")]
pub use self::generated::ExtensionKit;
#[cfg(feature = "ExternalAccessory")]
pub use self::generated::ExternalAccessory;
#[cfg(feature = "FileProvider")]
pub use self::generated::FileProvider;
#[cfg(feature = "FileProviderUI")]
pub use self::generated::FileProviderUI;
#[cfg(feature = "GameKit")]
pub use self::generated::GameKit;
#[cfg(feature = "HealthKit")]
pub use self::generated::HealthKit;
#[cfg(feature = "IdentityLookup")]
pub use self::generated::IdentityLookup;
#[cfg(feature = "LinkPresentation")]
pub use self::generated::LinkPresentation;
#[cfg(feature = "LocalAuthentication")]
pub use self::generated::LocalAuthentication;
#[cfg(feature = "LocalAuthenticationEmbeddedUI")]
pub use self::generated::LocalAuthenticationEmbeddedUI;
#[cfg(feature = "MailKit")]
pub use self::generated::MailKit;
#[cfg(feature = "MediaPlayer")]
pub use self::generated::MediaPlayer;
#[cfg(feature = "MetalFX")]
pub use self::generated::MetalFX;
#[cfg(feature = "MetalKit")]
pub use self::generated::MetalKit;
#[cfg(feature = "OSAKit")]
pub use self::generated::OSAKit;
#[cfg(feature = "ServiceManagement")]
pub use self::generated::ServiceManagement;
#[cfg(feature = "SoundAnalysis")]
pub use self::generated::SoundAnalysis;
#[cfg(feature = "Speech")]
pub use self::generated::Speech;
#[cfg(feature = "StoreKit")]
pub use self::generated::StoreKit;
#[cfg(feature = "UniformTypeIdentifiers")]
pub use self::generated::UniformTypeIdentifiers;
#[cfg(feature = "UserNotifications")]
pub use self::generated::UserNotifications;
#[cfg(feature = "Virtualization")]
pub use self::generated::Virtualization;
